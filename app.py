"""
üåê Streamlit –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Å–ø–∏–∫–µ—Ä–∞–º–∏
"""

import streamlit as st
import sys
from pathlib import Path
import tempfile
import os
from typing import Tuple

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.services.composition_engine import CompositionEngine
from src.services.export_service import ExportService
from src.utils.logger import setup_logger
from src.models.meeting_config import MeetingConfig
from src.models.speaker_config import SpeakerConfig
from src.models.export_config import (
    ExportConfig,
    VideoCodecConfig,
    AudioCodecConfig,
    GPUConfig,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Video Meeting Composer",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.title("üé• Video Meeting Composer")
    st.markdown(
        "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á–∏ –∏–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–æ–≤"
    )

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    tab1, tab2, tab3, tab4, tab5 = st.tabs(
        [
            "üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤",
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤",
            "üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—à–µ–∫",
            "üì§ –≠–∫—Å–ø–æ—Ä—Ç",
            "üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
        ]
    )

    with tab1:
        st.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.subheader("üñºÔ∏è –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        background_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=["jpg", "jpeg", "png", "bmp"],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP",
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–æ–≤
        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üé§ –í–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–∞ 1")
            speaker1_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
                type=["mp4", "avi", "mov", "mkv"],
                key="speaker1",
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV",
            )
            speaker1_name = st.text_input(
                "–ò–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
                value="–°–ø–∏–∫–µ—Ä 1",
                key="name1",
                help="–ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—à–∫–µ",
            )

        with col2:
            st.subheader("üé§ –í–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–∞ 2")
            speaker2_file = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
                type=["mp4", "avi", "mov", "mkv"],
                key="speaker2",
                help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV",
            )
            speaker2_name = st.text_input(
                "–ò–º—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
                value="–°–ø–∏–∫–µ—Ä 2",
                key="name2",
                help="–ò–º—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ –ø–ª–∞—à–∫–µ",
            )

    with tab2:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìè –†–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω —Å–ø–∏–∫–µ—Ä–æ–≤")
            speaker_width = st.slider(
                "–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞",
                min_value=200,
                max_value=800,
                value=400,
                step=50,
                help="–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
            )
            speaker_height = st.slider(
                "–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞",
                min_value=150,
                max_value=600,
                value=300,
                step=50,
                help="–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
            )

        with col2:
            st.subheader("üìç –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            auto_position = st.checkbox(
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                value=True,
                help="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤ –≤ —Å–≤–æ–∏—Ö –ø–æ–ª–æ–≤–∏–Ω–∞—Ö —ç–∫—Ä–∞–Ω–∞",
            )

            if not auto_position:
                st.warning(
                    "‚ö†Ô∏è –†—É—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö"
                )

    with tab3:
        st.header("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—à–µ–∫ —Å –∏–º–µ–Ω–∞–º–∏")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üî§ –¢–µ–∫—Å—Ç")
            font_size = st.slider(
                "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
                min_value=12,
                max_value=48,
                value=24,
                step=2,
                help="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö",
            )

            # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            font_color = st.color_picker(
                "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", value="#FFFFFF", help="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö"
            )

        with col2:
            st.subheader("üé® –§–æ–Ω –ø–ª–∞—à–∫–∏")
            plate_bg_color = st.color_picker(
                "–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–ª–∞—à–∫–∏",
                value="#000000",
                help="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–ª–∞—à–∫–∏ (—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)",
            )

            plate_border_color = st.color_picker(
                "–¶–≤–µ—Ç —Ä–∞–º–∫–∏", value="#FFFFFF", help="–¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –ø–ª–∞—à–∫–∏"
            )

            plate_border_width = st.slider(
                "–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏",
                min_value=0,
                max_value=10,
                value=2,
                step=1,
                help="–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
            )

            plate_padding = st.slider(
                "–û—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ",
                min_value=5,
                max_value=30,
                value=10,
                step=5,
                help="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ",
            )

    with tab4:
        st.header("üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")

        col1, col2 = st.columns(2)

        with col1:
            st.subheader("üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ")
            output_width = st.selectbox(
                "–®–∏—Ä–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
                options=[1280, 1920, 2560, 3840],
                index=1,
                help="–®–∏—Ä–∏–Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
            )
            output_height = st.selectbox(
                "–í—ã—Å–æ—Ç–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
                options=[720, 1080, 1440, 2160],
                index=1,
                help="–í—ã—Å–æ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
            )

            fps = st.slider(
                "FPS (–∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)",
                min_value=24,
                max_value=60,
                value=30,
                step=6,
                help="–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
            )

        with col2:
            st.subheader("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
            ffmpeg_preset = st.selectbox(
                "–ü—Ä–µ—Å–µ—Ç FFmpeg",
                options=[
                    "ultrafast",
                    "superfast",
                    "veryfast",
                    "faster",
                    "fast",
                    "medium",
                ],
                index=4,
                help="–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ = –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)",
            )

            ffmpeg_crf = st.slider(
                "CRF (–∫–∞—á–µ—Å—Ç–≤–æ)",
                min_value=18,
                max_value=35,
                value=23,
                step=1,
                help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä)",
            )

            use_gpu = st.checkbox(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ",
                value=True,
                help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è",
            )

    with tab5:
        st.header("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if validate_inputs(
            background_file, speaker1_file, speaker2_file, speaker1_name, speaker2_name
        ):
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            create_preview(
                background_file,
                speaker1_file,
                speaker2_file,
                speaker1_name,
                speaker2_name,
                speaker_width,
                speaker_height,
                font_size,
                font_color,
                plate_bg_color,
                plate_border_color,
                plate_border_width,
                plate_padding,
                output_width,
                output_height,
                fps,
                ffmpeg_preset,
                ffmpeg_crf,
                use_gpu,
            )
        else:
            st.warning(
                "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
            )

    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        if st.button("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", type="primary", use_container_width=True):
            if validate_inputs(
                background_file,
                speaker1_file,
                speaker2_file,
                speaker1_name,
                speaker2_name,
            ):
                create_video(
                    background_file,
                    speaker1_file,
                    speaker2_file,
                    speaker1_name,
                    speaker2_name,
                    speaker_width,
                    speaker_height,
                    font_size,
                    font_color,
                    plate_bg_color,
                    plate_border_color,
                    plate_border_width,
                    plate_padding,
                    output_width,
                    output_height,
                    fps,
                    ffmpeg_preset,
                    ffmpeg_crf,
                    use_gpu,
                )
            else:
                st.error(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤"
                )


def validate_inputs(
    background_file, speaker1_file, speaker2_file, speaker1_name, speaker2_name
) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if not background_file:
        return False
    if not speaker1_file:
        return False
    if not speaker2_file:
        return False
    if not speaker1_name.strip():
        return False
    if not speaker2_name.strip():
        return False
    return True


def hex_to_rgb(hex_color: str) -> Tuple[int, int, int]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ RGB."""
    hex_color = hex_color.lstrip("#")
    return tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))


def hex_to_rgba(hex_color: str, alpha: int = 180) -> Tuple[int, int, int, int]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ RGBA."""
    rgb = hex_to_rgb(hex_color)
    return rgb[0], rgb[1], rgb[2], alpha


def save_uploaded_file(uploaded_file, temp_dir: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    file_path = os.path.join(temp_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path


def create_preview(
    background_file,
    speaker1_file,
    speaker2_file,
    speaker1_name,
    speaker2_name,
    speaker_width,
    speaker_height,
    font_size,
    font_color,
    plate_bg_color,
    plate_border_color,
    plate_border_width,
    plate_padding,
    output_width,
    output_height,
    fps,
    ffmpeg_preset,
    ffmpeg_crf,
    use_gpu,
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞."""

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    @st.cache_data
    def generate_preview_cached(
        bg_file,
        sp1_file,
        sp2_file,
        name1,
        name2,
        width,
        height,
        f_size,
        f_color,
        bg_color,
        border_color,
        border_width,
        padding,
        out_width,
        out_height,
        fps_val,
        preset,
        crf,
        gpu,
    ):
        return _create_preview_internal(
            bg_file,
            sp1_file,
            sp2_file,
            name1,
            name2,
            width,
            height,
            f_size,
            f_color,
            bg_color,
            border_color,
            border_width,
            padding,
            out_width,
            out_height,
            fps_val,
            preset,
            crf,
            gpu,
        )

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    image_data = generate_preview_cached(
        background_file,
        speaker1_file,
        speaker2_file,
        speaker1_name,
        speaker2_name,
        speaker_width,
        speaker_height,
        font_size,
        font_color,
        plate_bg_color,
        plate_border_color,
        plate_border_width,
        plate_padding,
        output_width,
        output_height,
        fps,
        ffmpeg_preset,
        ffmpeg_crf,
        use_gpu,
    )

    if image_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        st.markdown("### üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏")

        st.image(image_data, caption="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏", width=800)

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        col1, col2, col3 = st.columns([1, 1, 1])
        with col2:
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                data=image_data,
                file_name="preview.jpg",
                mime="image/jpeg",
                use_container_width=True,
            )


def _create_preview_internal(
    background_file,
    speaker1_file,
    speaker2_file,
    speaker1_name,
    speaker2_name,
    speaker_width,
    speaker_height,
    font_size,
    font_color,
    plate_bg_color,
    plate_border_color,
    plate_border_width,
    plate_padding,
    output_width,
    output_height,
    fps,
    ffmpeg_preset,
    ffmpeg_crf,
    use_gpu,
):
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            background_path = save_uploaded_file(background_file, temp_dir)
            speaker1_path = save_uploaded_file(speaker1_file, temp_dir)
            speaker2_path = save_uploaded_file(speaker2_file, temp_dir)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            meeting_config = MeetingConfig(
                background_path=background_path,
                speaker1_path=speaker1_path,
                speaker2_path=speaker2_path,
                speaker1_name=speaker1_name,
                speaker2_name=speaker2_name,
                output_path="preview.jpg",
            )

            speaker_config = SpeakerConfig(
                width=speaker_width,
                height=speaker_height,
                position=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                font_size=font_size,
                font_color=hex_to_rgb(font_color),
                plate_bg_color=hex_to_rgba(plate_bg_color),
                plate_border_color=hex_to_rgb(plate_border_color),
                plate_border_width=plate_border_width,
                plate_padding=plate_padding,
            )

            export_config = ExportConfig(
                width=output_width,
                height=output_height,
                fps=fps,
                video_codec=VideoCodecConfig(preset=ffmpeg_preset, crf=ffmpeg_crf),
                audio_codec=AudioCodecConfig(),
                gpu_config=GPUConfig(use_gpu=use_gpu),
            )

            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            composition_engine = CompositionEngine(speaker_config, export_config)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            preview_path = os.path.join(temp_dir, "preview.jpg")
            success = composition_engine.create_preview(
                background_path,
                speaker1_path,
                speaker2_path,
                speaker1_name,
                speaker2_name,
                preview_path,
            )

            if success:
                # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                with open(preview_path, "rb") as f:
                    return f.read()
            else:
                return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return None


def create_video(
    background_file,
    speaker1_file,
    speaker2_file,
    speaker1_name,
    speaker2_name,
    speaker_width,
    speaker_height,
    font_size,
    font_color,
    plate_bg_color,
    plate_border_color,
    plate_border_width,
    plate_padding,
    output_width,
    output_height,
    fps,
    ffmpeg_preset,
    ffmpeg_crf,
    use_gpu,
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ."""

    with st.spinner("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                background_path = save_uploaded_file(background_file, temp_dir)
                speaker1_path = save_uploaded_file(speaker1_file, temp_dir)
                speaker2_path = save_uploaded_file(speaker2_file, temp_dir)

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                meeting_config = MeetingConfig(
                    background_path=background_path,
                    speaker1_path=speaker1_path,
                    speaker2_path=speaker2_path,
                    speaker1_name=speaker1_name,
                    speaker2_name=speaker2_name,
                    output_path=os.path.join(temp_dir, "meeting_output.mp4"),
                )

                speaker_config = SpeakerConfig(
                    width=speaker_width,
                    height=speaker_height,
                    position=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                    font_size=font_size,
                    font_color=hex_to_rgb(font_color),
                    plate_bg_color=hex_to_rgba(plate_bg_color),
                    plate_border_color=hex_to_rgb(plate_border_color),
                    plate_border_width=plate_border_width,
                    plate_padding=plate_padding,
                )

                export_config = ExportConfig(
                    width=output_width,
                    height=output_height,
                    fps=fps,
                    video_codec=VideoCodecConfig(preset=ffmpeg_preset, crf=ffmpeg_crf),
                    audio_codec=AudioCodecConfig(),
                    gpu_config=GPUConfig(use_gpu=use_gpu),
                )

                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                composition_engine = CompositionEngine(speaker_config, export_config)
                export_service = ExportService(export_config)

                # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
                success = export_service.export_video(
                    meeting_config, composition_engine
                )

                if success:
                    st.success("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    with open(meeting_config.output_path, "rb") as f:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                            data=f.read(),
                            file_name="meeting_output.mp4",
                            mime="video/mp4",
                        )
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")


if __name__ == "__main__":
    main()
