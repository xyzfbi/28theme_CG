"""
üåê Streamlit –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∂–∏–≤—ã–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞
"""

import streamlit as st
import sys
from pathlib import Path
import tempfile
import os
from typing import Tuple
import base64

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.services.composition_engine import CompositionEngine
from src.services.export_service import ExportService
from src.utils.logger import setup_logger
from src.models.meeting_config import MeetingConfig
from src.models.speaker_config import SpeakerConfig
from src.models.export_config import (
    ExportConfig,
    VideoCodecConfig,
    AudioCodecConfig,
    GPUConfig
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Video Meeting Composer",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    init_session_state()

    col_preview, col_settings = st.columns([2, 1])

    with col_preview:
        render_preview_section()

    with col_settings:
        render_settings_section()  # tabs —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞—é—Ç "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"

    render_export_section()


def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""

    # –§–∞–π–ª—ã
    if "background_file" not in st.session_state:
        st.session_state.background_file = None
    if "speaker1_file" not in st.session_state:
        st.session_state.speaker1_file = None
    if "speaker2_file" not in st.session_state:
        st.session_state.speaker2_file = None
    if "speaker1_name" not in st.session_state:
        st.session_state.speaker1_name = "–°–ø–∏–∫–µ—Ä 1"
    if "speaker2_name" not in st.session_state:
        st.session_state.speaker2_name = "–°–ø–∏–∫–µ—Ä 2"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤
    if "speaker_width" not in st.session_state:
        st.session_state.speaker_width = 400
    if "speaker_height" not in st.session_state:
        st.session_state.speaker_height = 300

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—à–µ–∫
    if "font_size" not in st.session_state:
        st.session_state.font_size = 24
    if "font_color" not in st.session_state:
        st.session_state.font_color = "#FFFFFF"
    if "plate_bg_color" not in st.session_state:
        st.session_state.plate_bg_color = "#000000"
    if "plate_border_color" not in st.session_state:
        st.session_state.plate_border_color = "#FFFFFF"
    if "plate_border_width" not in st.session_state:
        st.session_state.plate_border_width = 2
    if "plate_padding" not in st.session_state:
        st.session_state.plate_padding = 10

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    if "output_width" not in st.session_state:
        st.session_state.output_width = 1920
    if "output_height" not in st.session_state:
        st.session_state.output_height = 1080
    if "fps" not in st.session_state:
        st.session_state.fps = 30
    if "ffmpeg_preset" not in st.session_state:
        st.session_state.ffmpeg_preset = "fast"
    if "ffmpeg_crf" not in st.session_state:
        st.session_state.ffmpeg_crf = 23
    if "use_gpu" not in st.session_state:
        st.session_state.use_gpu = True


def render_preview_section():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    st.header("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
    st.markdown("---")

    preview_placeholder = st.empty()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    if validate_inputs(
        st.session_state.background_file,
        st.session_state.speaker1_file,
        st.session_state.speaker2_file,
        st.session_state.speaker1_name,
        st.session_state.speaker2_name,
    ):
        # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        with st.spinner("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞..."):
            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            preview_image = create_preview(
                st.session_state.speaker1_name,
                st.session_state.speaker2_name,
                st.session_state.speaker_width,
                st.session_state.speaker_height,
                st.session_state.font_size,
                st.session_state.font_color,
                st.session_state.plate_bg_color,
                st.session_state.plate_border_color,
                st.session_state.plate_border_width,
                st.session_state.plate_padding,
                st.session_state.output_width,
                st.session_state.output_height,
            )

            if preview_image:
                preview_placeholder.image(
                    preview_image,
                    caption="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
                    use_container_width=True,
                )

                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                    data=preview_image,
                    file_name="preview.jpg",
                    mime="image/jpeg",
                    use_container_width=True,
                )
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        st.info("üìã –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        create_placeholder_preview()


def render_settings_section():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    tab_upload, tab1, tab2, tab3 = st.tabs(
        ["‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "üé§ –°–ø–∏–∫–µ—Ä—ã", "üé® –ü–ª–∞—à–∫–∏", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"]
    )
    with tab_upload:
        render_upload_tab()
    with tab1:
        render_speaker_settings()
    with tab2:
        render_plate_settings()
    with tab3:
        render_export_settings()


def render_upload_tab():
    st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
    background_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        type=["jpg", "jpeg", "png", "bmp"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, BMP",
        key="background_uploader",
    )
    speaker1_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
        type=["mp4", "avi", "mov", "mkv"],
        key="speaker1_uploader",
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV",
    )
    speaker1_name = st.text_input(
        "–ò–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞", value=st.session_state.speaker1_name, key="name1_input"
    )
    speaker2_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
        type=["mp4", "avi", "mov", "mkv"],
        key="speaker2_uploader",
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, AVI, MOV, MKV",
    )
    speaker2_name = st.text_input(
        "–ò–º—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞", value=st.session_state.speaker2_name, key="name2_input"
    )
    # session_state updates and rerun logic
    changed = False
    for name, val in [
        ("background_file", background_file),
        ("speaker1_file", speaker1_file),
        ("speaker2_file", speaker2_file),
        ("speaker1_name", speaker1_name),
        ("speaker2_name", speaker2_name),
    ]:
        if getattr(st.session_state, name) != val:
            setattr(st.session_state, name, val)
            changed = True
    if changed:
        st.rerun()


def render_speaker_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏–∫–µ—Ä–æ–≤."""

    st.subheader("üìè –†–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω —Å–ø–∏–∫–µ—Ä–æ–≤")

    speaker_width = st.slider(
        "–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞",
        min_value=200,
        max_value=800,
        value=st.session_state.speaker_width,
        step=50,
        help="–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        key="speaker_width_slider",
    )

    speaker_height = st.slider(
        "–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞",
        min_value=150,
        max_value=600,
        value=st.session_state.speaker_height,
        step=50,
        help="–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        key="speaker_height_slider",
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (
        speaker_width != st.session_state.speaker_width
        or speaker_height != st.session_state.speaker_height
    ):
        st.session_state.speaker_width = speaker_width
        st.session_state.speaker_height = speaker_height
        st.rerun()


def render_plate_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—à–µ–∫."""

    st.subheader("üî§ –¢–µ–∫—Å—Ç")

    font_size = st.slider(
        "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
        min_value=12,
        max_value=48,
        value=st.session_state.font_size,
        step=2,
        help="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö",
        key="font_size_slider",
    )

    font_color = st.color_picker(
        "–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞",
        value=st.session_state.font_color,
        help="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö",
        key="font_color_picker",
    )

    st.subheader("üé® –§–æ–Ω –ø–ª–∞—à–∫–∏")

    plate_bg_color = st.color_picker(
        "–¶–≤–µ—Ç —Ñ–æ–Ω–∞",
        value=st.session_state.plate_bg_color,
        help="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–ª–∞—à–∫–∏",
        key="plate_bg_color_picker",
    )

    plate_border_color = st.color_picker(
        "–¶–≤–µ—Ç —Ä–∞–º–∫–∏",
        value=st.session_state.plate_border_color,
        help="–¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –ø–ª–∞—à–∫–∏",
        key="plate_border_color_picker",
    )

    plate_border_width = st.slider(
        "–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏",
        min_value=0,
        max_value=10,
        value=st.session_state.plate_border_width,
        step=1,
        help="–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        key="plate_border_width_slider",
    )

    plate_padding = st.slider(
        "–û—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ",
        min_value=5,
        max_value=30,
        value=st.session_state.plate_padding,
        step=5,
        help="–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ",
        key="plate_padding_slider",
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    changed = False
    if font_size != st.session_state.font_size:
        st.session_state.font_size = font_size
        changed = True
    if font_color != st.session_state.font_color:
        st.session_state.font_color = font_color
        changed = True
    if plate_bg_color != st.session_state.plate_bg_color:
        st.session_state.plate_bg_color = plate_bg_color
        changed = True
    if plate_border_color != st.session_state.plate_border_color:
        st.session_state.plate_border_color = plate_border_color
        changed = True
    if plate_border_width != st.session_state.plate_border_width:
        st.session_state.plate_border_width = plate_border_width
        changed = True
    if plate_padding != st.session_state.plate_padding:
        st.session_state.plate_padding = plate_padding
        changed = True

    if changed:
        st.rerun()


def render_export_settings():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞."""

    st.subheader("üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ")

    output_width = st.selectbox(
        "–®–∏—Ä–∏–Ω–∞",
        options=[1280, 1920, 2560, 3840],
        index=[1280, 1920, 2560, 3840].index(st.session_state.output_width),
        help="–®–∏—Ä–∏–Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        key="output_width_select",
    )

    output_height = st.selectbox(
        "–í—ã—Å–æ—Ç–∞",
        options=[720, 1080, 1440, 2160],
        index=[720, 1080, 1440, 2160].index(st.session_state.output_height),
        help="–í—ã—Å–æ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        key="output_height_select",
    )

    fps = st.slider(
        "FPS",
        min_value=24,
        max_value=120,
        value=st.session_state.fps,
        step=6,
        help="–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
        key="fps_slider",
    )

    st.subheader("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

    ffmpeg_preset = st.selectbox(
        "–ü—Ä–µ—Å–µ—Ç FFmpeg",
        options=["ultrafast", "superfast", "veryfast", "faster", "fast", "medium"],
        index=["ultrafast", "superfast", "veryfast", "faster", "fast", "medium"].index(
            st.session_state.ffmpeg_preset
        ),
        help="–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ = –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)",
        key="ffmpeg_preset_select",
    )

    ffmpeg_crf = st.slider(
        "CRF (–∫–∞—á–µ—Å—Ç–≤–æ)",
        min_value=18,
        max_value=35,
        value=st.session_state.ffmpeg_crf,
        step=1,
        help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä)",
        key="ffmpeg_crf_slider",
    )


    # –û–±–Ω–æ–≤–ª—è–µ–º session_state –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    resolution_changed = False
    if output_width != st.session_state.output_width:
        st.session_state.output_width = output_width
        resolution_changed = True
    if output_height != st.session_state.output_height:
        st.session_state.output_height = output_height
        resolution_changed = True

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    st.session_state.fps = fps
    st.session_state.ffmpeg_preset = ffmpeg_preset
    st.session_state.ffmpeg_crf = ffmpeg_crf

    if resolution_changed:
        st.rerun()


def render_export_section():
    """–°–µ–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–¥–µ–æ."""

    st.markdown("---")

    col1, col2, col3 = st.columns([1, 2, 1])

    with col2:
        if st.button("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", type="primary", use_container_width=True):
            if validate_inputs(
                st.session_state.background_file,
                st.session_state.speaker1_file,
                st.session_state.speaker2_file,
                st.session_state.speaker1_name,
                st.session_state.speaker2_name,
            ):
                create_video()
            else:
                st.error(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤"
                )


def validate_inputs(
    background_file, speaker1_file, speaker2_file, speaker1_name, speaker2_name
) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if not background_file:
        return False
    if not speaker1_file:
        return False
    if not speaker2_file:
        return False
    if not speaker1_name.strip():
        return False
    if not speaker2_name.strip():
        return False
    return True


def hex_to_rgb(hex_color: str) -> Tuple[int, ...]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ RGB."""
    hex_color = hex_color.lstrip("#")
    return tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))


def hex_to_rgba(hex_color: str, alpha: int = 180) -> Tuple[int, int, int, int]:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è HEX —Ü–≤–µ—Ç–∞ –≤ RGBA."""
    rgb = hex_to_rgb(hex_color)
    return rgb[0], rgb[1], rgb[2], alpha


def save_uploaded_file(uploaded_file, temp_dir: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    file_path = os.path.join(temp_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path


def create_placeholder_preview():
    with open("public/plug.png", "rb") as image_file:
        encoded = base64.b64encode(image_file.read()).decode()
    st.markdown(
        f"""
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 450px; background: rgba(0,0,0,0);">
            <img src="data:image/png;base64,{encoded}" alt="Preview" style="height: 120px;" />
            <div style="margin-top: 16px; color: #888; font-size: 1.1rem;">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å</div>
        </div>
        """,
        unsafe_allow_html=True,
    )


@st.cache_data
def create_preview(
    speaker1_name,
    speaker2_name,
    speaker_width,
    speaker_height,
    font_size,
    font_color,
    plate_bg_color,
    plate_border_color,
    plate_border_width,
    plate_padding,
    output_width,
    output_height,
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º."""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            background_path = save_uploaded_file(
                st.session_state.background_file, temp_dir
            )
            speaker1_path = save_uploaded_file(st.session_state.speaker1_file, temp_dir)
            speaker2_path = save_uploaded_file(st.session_state.speaker2_file, temp_dir)

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            MeetingConfig(
                background_path=background_path,
                speaker1_path=speaker1_path,
                speaker2_path=speaker2_path,
                speaker1_name=speaker1_name,
                speaker2_name=speaker2_name,
                output_path="preview.jpg",
            )

            speaker_config = SpeakerConfig(
                width=speaker_width,
                height=speaker_height,
                position=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                font_size=font_size,
                font_color=hex_to_rgb(font_color),
                plate_bg_color=hex_to_rgba(plate_bg_color),
                plate_border_color=hex_to_rgb(plate_border_color),
                plate_border_width=plate_border_width,
                plate_padding=plate_padding,
            )

            export_config = ExportConfig(
                width=output_width,
                height=output_height,
                fps=30,  # –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ FPS –Ω–µ –≤–∞–∂–µ–Ω
                video_codec=VideoCodecConfig(),
                audio_codec=AudioCodecConfig(),
                gpu_config=GPUConfig(use_gpu=False),  # –î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ GPU –Ω–µ –Ω—É–∂–µ–Ω
            )

            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            composition_engine = CompositionEngine(speaker_config, export_config)

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            preview_path = os.path.join(temp_dir, "preview.jpg")
            success = composition_engine.create_preview(
                background_path,
                speaker1_path,
                speaker2_path,
                speaker1_name,
                speaker2_name,
                preview_path,
            )

            if success:
                # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                with open(preview_path, "rb") as f:
                    return f.read()
            else:
                return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        return None


def get_file_hash(uploaded_file):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    if uploaded_file is None:
        return None
    return hash(uploaded_file.getvalue())


def create_video():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ."""

    with st.spinner("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                background_path = save_uploaded_file(
                    st.session_state.background_file, temp_dir
                )
                speaker1_path = save_uploaded_file(
                    st.session_state.speaker1_file, temp_dir
                )
                speaker2_path = save_uploaded_file(
                    st.session_state.speaker2_file, temp_dir
                )

                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                meeting_config = MeetingConfig(
                    background_path=background_path,
                    speaker1_path=speaker1_path,
                    speaker2_path=speaker2_path,
                    speaker1_name=st.session_state.speaker1_name,
                    speaker2_name=st.session_state.speaker2_name,
                    output_path=os.path.join(temp_dir, "meeting_output.mp4"),
                )

                speaker_config = SpeakerConfig(
                    width=st.session_state.speaker_width,
                    height=st.session_state.speaker_height,
                    position=None,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
                    font_size=st.session_state.font_size,
                    font_color=hex_to_rgb(st.session_state.font_color),
                    plate_bg_color=hex_to_rgba(st.session_state.plate_bg_color),
                    plate_border_color=hex_to_rgb(st.session_state.plate_border_color),
                    plate_border_width=st.session_state.plate_border_width,
                    plate_padding=st.session_state.plate_padding,
                )

                export_config = ExportConfig(
                    width=st.session_state.output_width,
                    height=st.session_state.output_height,
                    fps=st.session_state.fps,
                    video_codec=VideoCodecConfig(
                        preset=st.session_state.ffmpeg_preset,
                        crf=st.session_state.ffmpeg_crf,
                    ),
                    audio_codec=AudioCodecConfig(),
                    gpu_config=GPUConfig(use_gpu=st.session_state.use_gpu),
                )

                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
                composition_engine = CompositionEngine(speaker_config, export_config)
                export_service = ExportService(export_config)

                # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ
                success = export_service.export_video(
                    meeting_config, composition_engine
                )

                if success:
                    st.success("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    with open(meeting_config.output_path, "rb") as f:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                            data=f.read(),
                            file_name="meeting_output.mp4",
                            mime="video/mp4",
                        )
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")

        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")


if __name__ == "__main__":
    main()
