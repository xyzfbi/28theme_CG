import streamlit as st
import sys
from pathlib import Path
import tempfile
import os
from typing import Tuple, Optional
import base64
import matplotlib.font_manager as fm

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤, —á—Ç–æ–±—ã –º–æ–¥—É–ª–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
from src.services.composition_engine import CompositionEngine
from src.services.export_service import ExportService
from src.utils.logger import setup_logger
from src.models.meeting_config import MeetingConfig
from src.models.speaker_config import SpeakerConfig
from src.models.export_config import (
    ExportConfig,
    VideoCodecConfig,
    AudioCodecConfig,
    GPUConfig,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger()


def get_system_fonts():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ —à—Ä–∏—Ñ—Ç–æ–≤."""
    fonts = fm.findSystemFonts(fontpaths=None, fontext="ttf")
    font_names = set()
    for font in fonts:
        try:
            font_prop = fm.FontProperties(fname=font)
            font_names.add(font_prop.get_name())
        except Exception:
            continue
    return sorted(font_names)


def get_font_path(font_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ TTF —Ñ–∞–π–ª—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞.
    –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Arial.
    """
    system_fonts = fm.findSystemFonts(fontpaths=None, fontext="ttf")
    font_paths = {fm.FontProperties(fname=f).get_name(): f for f in system_fonts}

    return font_paths.get(font_name, "arial.ttf")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤–Ω–µ –∫–ª–∞—Å—Å–∞, —Ç.–∫. –æ–Ω–∏ —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã)
def hex_to_rgb(hex_color: str) -> Tuple[int, ...]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '#FFFFFF') –≤ –∫–æ—Ä—Ç–µ–∂ RGB (255, 255, 255).

    :param hex_color: –°—Ç—Ä–æ–∫–∞ —Å HEX –∫–æ–¥–æ–º —Ü–≤–µ—Ç–∞, –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '#'.
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª (R, G, B) –æ—Ç 0 –¥–æ 255.
    """
    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª '#' –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞.
    hex_color = hex_color.lstrip("#")
    return tuple(int(hex_color[i : i + 2], 16) for i in (0, 2, 4))


def hex_to_rgba(hex_color: str, alpha: int = 180) -> Tuple[int, int, int, int]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç HEX —Ü–≤–µ—Ç –≤ –∫–æ—Ä—Ç–µ–∂ RGBA, –∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞.
    –ê–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —Ñ–æ–Ω–∞ –ø–ª–∞—à–∫–∏.

    :param hex_color: –°—Ç—Ä–æ–∫–∞ —Å HEX –∫–æ–¥–æ–º —Ü–≤–µ—Ç–∞.
    :param alpha: –ó–Ω–∞—á–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ –æ—Ç 0 (–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π) –¥–æ 255 (–Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 180.
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª (R, G, B, A).
    """
    # –î–ª—è —Ü–µ–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º alpha 0-255.
    rgb = hex_to_rgb(hex_color)
    return rgb[0], rgb[1], rgb[2], alpha


def save_uploaded_file(uploaded_file, temp_dir: str) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ Streamlit —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.

    :param uploaded_file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ st.file_uploader.
    :param temp_dir: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª.
    :return: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.
    """
    file_path = os.path.join(temp_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        # getbuffer() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤.
        f.write(uploaded_file.getbuffer())
    return file_path


def save_get_files(tmp_dir: str) -> Tuple[str, str, str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ Streamlit, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö
    –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç–∏ –∫ –Ω–∏–º.

    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–µ–π _validate_inputs.

    :param tmp_dir: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö –ø—É—Ç–µ–π: (—Ñ–æ–Ω, –≤–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–∞ 1, –≤–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–∞ 2).
    """
    background_file = st.session_state.get("background_file")
    speaker1_file = st.session_state.get("speaker1_file")
    speaker2_file = st.session_state.get("speaker2_file")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    background_path = save_uploaded_file(background_file, tmp_dir)
    speaker1_path = save_uploaded_file(speaker1_file, tmp_dir)
    speaker2_path = save_uploaded_file(speaker2_file, tmp_dir)

    return background_path, speaker1_path, speaker2_path


def _validate_inputs() -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏.

    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ —Ç—Ä–∏ —Ñ–∞–π–ª–∞ (—Ñ–æ–Ω, –≤–∏–¥–µ–æ 1, –≤–∏–¥–µ–æ 2) –∏
    –≤–≤–µ–¥–µ–Ω—ã –∏–º–µ–Ω–∞ –æ–±–æ–∏—Ö —Å–ø–∏–∫–µ—Ä–æ–≤ (–Ω–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏).

    :return: True, –µ—Å–ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏–Ω–∞—á–µ False.
    """
    return all(
        [
            st.session_state.get("background_file"),
            st.session_state.get("speaker1_file"),
            st.session_state.get("speaker2_file"),
            st.session_state.speaker1_name.strip(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è
            st.session_state.speaker2_name.strip(),  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ–µ –∏–º—è
        ]
    )


class VideoMeetingComposerApp:
    """
    –ö–ª–∞—Å—Å Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π –≤—ã–∑–æ–≤–∞
    —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–¥–µ–æ.
    """

    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏.
        """
        st.set_page_config(
            page_title="Video Meeting Composer",
            page_icon="üé•",
            layout="wide",
            initial_sidebar_state="expanded",
        )
        self._init_session_state()

    @staticmethod
    def _init_session_state():
        default_state = {
            "speaker1_name": "–°–ø–∏–∫–µ—Ä 1",
            "speaker2_name": "–°–ø–∏–∫–µ—Ä 2",
            "speaker_width": 400,
            "speaker_height": 300,
            "manual_font_size": 24,
            "font_color": "#FFFFFF",
            "plate_bg_color": "#000000",
            "plate_border_color": "#FFFFFF",
            "plate_border_width": 2,
            "plate_padding": 30,
            "output_width": 1920,
            "output_height": 1080,
            "fps": 30,
            "ffmpeg_preset": "fast",
            "ffmpeg_crf": 23,
            "use_gpu": True,
            "font_family": "Arial",
        }
        for key, value in default_state.items():
            if key not in st.session_state:
                st.session_state[key] = value

    def _get_config_objects(self) -> Tuple[SpeakerConfig, ExportConfig]:
        output_height = st.session_state.output_height
        speaker_height = st.session_state.speaker_height
        FONT_SIZE_MIN = max(12, int(speaker_height * 0.04))
        FONT_SIZE_MAX = max(FONT_SIZE_MIN + 1, int(speaker_height * 0.15))
        user_font_size = st.session_state.manual_font_size
        dynamic_font_size = max(FONT_SIZE_MIN, min(FONT_SIZE_MAX, user_font_size))
        user_font_name = st.session_state.font_family
        # user_font_path = get_font_path(user_font_name)
        PADDING_MIN = max(2, int(output_height * 0.01))
        PYDANTIC_PADDING_LIMIT = 50
        user_plate_padding = st.session_state.plate_padding
        dynamic_plate_padding = max(
            PADDING_MIN, min(PYDANTIC_PADDING_LIMIT, user_plate_padding)
        )
        speaker_config = SpeakerConfig(
            width=st.session_state.speaker_width,
            height=st.session_state.speaker_height,
            position=None,
            font_size=dynamic_font_size,
            font_color=hex_to_rgb(st.session_state.font_color),
            plate_bg_color=hex_to_rgba(st.session_state.plate_bg_color),
            plate_border_color=hex_to_rgb(st.session_state.plate_border_color),
            plate_border_width=st.session_state.plate_border_width,
            plate_padding=dynamic_plate_padding,
            font_family=user_font_name,
        )
        export_config = ExportConfig(
            width=st.session_state.output_width,
            height=st.session_state.output_height,
            fps=st.session_state.fps,
            video_codec=VideoCodecConfig(
                preset=st.session_state.ffmpeg_preset,
                crf=st.session_state.ffmpeg_crf,
            ),
            audio_codec=AudioCodecConfig(),
            gpu_config=GPUConfig(use_gpu=st.session_state.use_gpu),
        )
        return speaker_config, export_config

    # --- –°–µ–∫—Ü–∏–∏ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ---

    @staticmethod
    def _render_upload_tab():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ–Ω –∏ –≤–∏–¥–µ–æ —Å–ø–∏–∫–µ—Ä–æ–≤) –∏ –≤–≤–æ–¥–∞ –∏–º–µ–Ω."""
        st.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

        st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=["jpg", "jpeg", "png", "bmp"],
            key="background_file",
            help="JPG, PNG, BMP",
        )
        st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
            type=["mp4", "avi", "mov", "mkv"],
            key="speaker1_file",
            help="MP4, AVI, MOV, MKV",
        )
        st.text_input("–ò–º—è –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞", key="speaker1_name")
        st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞",
            type=["mp4", "avi", "mov", "mkv"],
            key="speaker2_file",
            help="MP4, AVI, MOV, MKV",
        )
        st.text_input("–ò–º—è –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞", key="speaker2_name")

    @staticmethod
    def _render_speaker_settings():
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω —Å–ø–∏–∫–µ—Ä–æ–≤.
        –ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª–∑—É–Ω–∫–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
        """
        st.subheader("üìè –†–∞–∑–º–µ—Ä—ã –æ–∫–æ–Ω —Å–ø–∏–∫–µ—Ä–æ–≤")

        output_width = st.session_state.output_width
        output_height = st.session_state.output_height

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —à–∏—Ä–∏–Ω—ã (–æ—Ç 10% –¥–æ ~47% –∫–∞–¥—Ä–∞)
        WIDTH_MIN = max(150, int(output_width * 0.1))
        WIDTH_MAX = int(output_width * 0.46875)

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã—Å–æ—Ç—ã (–æ—Ç 10% –¥–æ 60% –∫–∞–¥—Ä–∞)
        HEIGHT_MIN = max(100, int(output_height * 0.1))
        HEIGHT_MAX = int(output_height * 0.6)

        st.info(f"""
            –ì—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –æ–∫–æ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É—é—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ({output_width}x{output_height}):
            - **–®–∏—Ä–∏–Ω–∞:** –æ—Ç **{WIDTH_MIN}** –¥–æ **{WIDTH_MAX}**px.
            - **–í—ã—Å–æ—Ç–∞:** –æ—Ç **{HEIGHT_MIN}** –¥–æ **{HEIGHT_MAX}**px.
        """)

        st.slider(
            "–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞",
            min_value=WIDTH_MIN,
            max_value=WIDTH_MAX,
            step=1,
            key="speaker_width",
            help="–®–∏—Ä–∏–Ω–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö. –ì—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—â–µ–π —à–∏—Ä–∏–Ω—ã –≤–∏–¥–µ–æ.",
        )
        st.slider(
            "–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞",
            min_value=HEIGHT_MIN,
            max_value=HEIGHT_MAX,
            step=1,
            key="speaker_height",
            help="–í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö. –ì—Ä–∞–Ω–∏—Ü—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –æ–±—â–µ–π –≤—ã—Å–æ—Ç—ã –≤–∏–¥–µ–æ.",
        )

    @staticmethod
    def _render_plate_settings():
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—à–µ–∫ (—Ç–µ–∫—Å—Ç, —Ñ–æ–Ω, —Ä–∞–º–∫–∞, –æ—Ç—Å—Ç—É–ø—ã).
        –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –æ—Ç—Å—Ç—É–ø—ã (padding) –∏–º–µ—é—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.
        """
        st.subheader("üî§ –¢–µ–∫—Å—Ç")

        output_height = st.session_state.output_height
        speaker_height = st.session_state.speaker_height

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ (–æ—Ç 4% –¥–æ 15% –≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞)
        FONT_SIZE_MIN = max(12, int(speaker_height * 0.04))
        FONT_SIZE_MAX = max(FONT_SIZE_MIN + 1, int(speaker_height * 0.15))

        # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        st.slider(
            "–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞",
            min_value=FONT_SIZE_MIN,
            max_value=FONT_SIZE_MAX,
            step=1,
            key="manual_font_size",
            help=f"–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö. –î–∏–∞–ø–∞–∑–æ–Ω: {FONT_SIZE_MIN}-{FONT_SIZE_MAX}px",
        )

        st.info(
            f"""
            **–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:** {st.session_state.manual_font_size}px.
            **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã:** –æ—Ç **{FONT_SIZE_MIN}** –¥–æ **{FONT_SIZE_MAX}**px, –∑–∞–≤–∏—Å—è—Ç –æ—Ç **–≤—ã—Å–æ—Ç—ã –æ–∫–Ω–∞ —Å–ø–∏–∫–µ—Ä–∞** ({speaker_height}px).
            """
        )

        system_fonts = get_system_fonts()

        st.selectbox(
            "–®—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞",
            options=system_fonts,
            key="font_family",
            help="–í—ã–±–µ—Ä–∏—Ç–µ —à—Ä–∏—Ñ—Ç –∏–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º–µ",
        )

        st.color_picker("–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞", key="font_color", help="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø–ª–∞—à–∫–∞—Ö")

        st.subheader("üé® –§–æ–Ω –ø–ª–∞—à–∫–∏")
        st.color_picker("–¶–≤–µ—Ç —Ñ–æ–Ω–∞", key="plate_bg_color", help="–¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–ª–∞—à–∫–∏")
        st.color_picker(
            "–¶–≤–µ—Ç —Ä–∞–º–∫–∏", key="plate_border_color", help="–¶–≤–µ—Ç —Ä–∞–º–∫–∏ –≤–æ–∫—Ä—É–≥ –ø–ª–∞—à–∫–∏"
        )
        st.slider(
            "–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏",
            min_value=0,
            max_value=10,
            step=1,
            key="plate_border_width",
            help="–¢–æ–ª—â–∏–Ω–∞ —Ä–∞–º–∫–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        )

        # ---------------------------------------------------------------------
        # –ñ–ï–°–¢–ö–ò–ô –õ–ò–ú–ò–¢ –î–õ–Ø PADDING (PYDANTIC)
        PYDANTIC_PADDING_LIMIT = 50
        PADDING_MIN = max(2, int(output_height * 0.01))

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤ UI, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ 50px (–¥–ª—è Pydantic)
        SLIDER_PADDING_MAX = min(
            PYDANTIC_PADDING_LIMIT, max(PADDING_MIN + 1, int(output_height * 0.08))
        )

        # –ù–æ–≤—ã–π –ø–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è padding
        st.slider(
            "–û—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ (padding)",
            min_value=PADDING_MIN,
            max_value=SLIDER_PADDING_MAX,
            step=1,
            key="plate_padding",
            help=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤ –ø–ª–∞—à–∫–µ. –î–∏–∞–ø–∞–∑–æ–Ω: {PADDING_MIN}-{SLIDER_PADDING_MAX}px. –ú–∞–∫—Å–∏–º—É–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω {PYDANTIC_PADDING_LIMIT}px –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –º–æ–¥–µ–ª—å—é.",
        )

        st.info(
            f"""
            **–¢–µ–∫—É—â–∏–π padding:** {st.session_state.plate_padding}px.
            **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã:** –æ—Ç **{PADDING_MIN}** –¥–æ **{SLIDER_PADDING_MAX}**px. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω **{PYDANTIC_PADDING_LIMIT}px**, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
            """
        )
        # -------------------------------------------------------------

    @staticmethod
    def _render_export_settings():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ FFmpeg."""
        st.subheader("üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∏–¥–µ–æ")
        st.selectbox(
            "–®–∏—Ä–∏–Ω–∞",
            options=[1280, 1920, 2560, 3840],
            key="output_width",
            help="–®–∏—Ä–∏–Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        )
        st.selectbox(
            "–í—ã—Å–æ—Ç–∞",
            options=[720, 1080, 1440, 2160],
            key="output_height",
            help="–í—ã—Å–æ—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∏–∫—Å–µ–ª—è—Ö",
        )
        st.slider(
            "FPS",
            min_value=24,
            max_value=120,
            step=6,
            key="fps",
            help="–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ",
        )

        st.subheader("‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        st.selectbox(
            "–ü—Ä–µ—Å–µ—Ç FFmpeg",
            options=["ultrafast", "superfast", "veryfast", "faster", "fast", "medium"],
            key="ffmpeg_preset",
            help="–°–∫–æ—Ä–æ—Å—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ = –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞)",
        )
        st.slider(
            "CRF (–∫–∞—á–µ—Å—Ç–≤–æ)",
            min_value=18,
            max_value=35,
            step=1,
            key="ffmpeg_crf",
            help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä)",
        )

    def _render_settings_section(self):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏."""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        tab_upload, tab1, tab2, tab3 = st.tabs(
            ["‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "üé§ –°–ø–∏–∫–µ—Ä—ã", "üé® –ü–ª–∞—à–∫–∏", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"]
        )
        with tab_upload:
            self._render_upload_tab()
        with tab1:
            self._render_speaker_settings()
        with tab2:
            self._render_plate_settings()
        with tab3:
            self._render_export_settings()

    def _render_preview_section(self):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –≤–∫–ª—é—á–∞—è –≤—ã–∑–æ–≤ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        st.header("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        st.markdown("---")

        preview_placeholder = st.empty()

        if _validate_inputs():
            with st.spinner("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞..."):
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è, —á—Ç–æ–±—ã Streamlit –∑–Ω–∞–ª, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫—ç—à
                state_hash = self._get_state_hash_for_caching()
                preview_image = self._create_preview_cached(state_hash)

                if preview_image:
                    preview_placeholder.image(
                        preview_image,
                        caption="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
                        width="stretch",
                    )
                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                        data=preview_image,
                        file_name="preview.jpg",
                        mime="image/jpeg",
                        width="stretch",
                    )
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        else:
            # –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            self._create_placeholder_preview()

    @staticmethod
    def _create_placeholder_preview():
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
        –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏.
        """
        st.info("üìã –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ plug.png —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –∑–∞–≥–ª—É—à–∫–µ
            base_dir = Path(__file__).parent
            plug_path = base_dir / "public" / "plug.png"

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
            if not plug_path.exists():
                st.warning(
                    f"–§–∞–π–ª '{plug_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∑–∞–≥–ª—É—à–∫—É."
                )
                return

            with open(plug_path, "rb") as image_file:
                encoded = base64.b64encode(image_file.read()).decode()
            st.markdown(
                f"""
                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 450px; background: rgba(0,0,0,0);">
                    <img src="data:image/png;base64,{encoded}" alt="Preview" style="height: 120px;" />
                    <div style="margin-top: 16px; color: #888; font-size: 1.1rem;">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å</div>
                </div>
                """,
                unsafe_allow_html=True,
            )
        except Exception as e:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏
            st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏: {e}")

    @st.cache_data
    def _create_preview_cached(_self, state_hash: int) -> Optional[bytes]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG).
        –§—É–Ω–∫—Ü–∏—è –∫—ç—à–∏—Ä—É–µ—Ç—Å—è Streamlit: –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ state_hash.

        :param _self: –°—Å—ã–ª–∫–∞ –Ω–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º _self).
        :param state_hash: –•–µ—à, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.
        :return: –ë–∞–π—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è JPEG, –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
        """
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–µ—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è _self
        speaker_config, export_config = _self._get_config_objects()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            with tempfile.TemporaryDirectory() as temp_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ temp_dir
                background_path, speaker1_path, speaker2_path = save_get_files(temp_dir)

                composition_engine = CompositionEngine(speaker_config, export_config)

                preview_path = os.path.join(temp_dir, "preview.jpg")
                # –í—ã–∑—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
                success = composition_engine.create_preview(
                    background_path,
                    speaker1_path,
                    speaker2_path,
                    st.session_state.speaker1_name,
                    st.session_state.speaker2_name,
                    preview_path,
                )

                if success:
                    # –ß–∏—Ç–∞–µ–º –±–∞–π—Ç—ã —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é
                    with open(preview_path, "rb") as f:
                        return f.read()
                else:
                    return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            return None

    @staticmethod
    def _get_state_hash_for_caching() -> int:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä.
        –≠—Ç–æ—Ç —Ö–µ—à –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @st.cache_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è,
        –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –∫—ç—à.

        :return: –¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à.
        """
        background_file = st.session_state.get("background_file")
        speaker1_file = st.session_state.get("speaker1_file")
        speaker2_file = st.session_state.get("speaker2_file")

        hash_data = (
            # –§–∞–π–ª—ã: –∏—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è),
            # –∏–Ω–∞—á–µ None.
            background_file.file_id if background_file else None,
            speaker1_file.file_id if speaker1_file else None,
            speaker2_file.file_id if speaker2_file else None,
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
            st.session_state.speaker1_name,
            st.session_state.speaker2_name,
            st.session_state.speaker_width,
            st.session_state.speaker_height,
            st.session_state.manual_font_size,
            st.session_state.font_color,
            st.session_state.plate_bg_color,
            st.session_state.plate_border_color,
            st.session_state.plate_border_width,
            st.session_state.plate_padding,
            st.session_state.output_width,
            st.session_state.output_height,
            st.session_state.font_family,
        )
        return hash(hash_data)

    def _render_export_section(self):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–¥–µ–æ."""
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            if st.button("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", type="primary", width="stretch"):
                if _validate_inputs():
                    self._create_video()
                else:
                    st.error(
                        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∏ –≤–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Å–ø–∏–∫–µ—Ä–æ–≤"
                    )

    def _create_video(self):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏.
        """
        with st.spinner("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"):
            try:
                # 1. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                with tempfile.TemporaryDirectory() as temp_dir:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ Streamlit
                    background_path, speaker1_path, speaker2_path = save_get_files(
                        temp_dir
                    )

                    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                    speaker_config, export_config = self._get_config_objects()

                    output_file_path = os.path.join(temp_dir, "meeting_output.mp4")
                    meeting_config = MeetingConfig(
                        background_path=background_path,
                        speaker1_path=speaker1_path,
                        speaker2_path=speaker2_path,
                        speaker1_name=st.session_state.speaker1_name,
                        speaker2_name=st.session_state.speaker2_name,
                        output_path=output_file_path,
                    )

                    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
                    composition_engine = CompositionEngine(
                        speaker_config, export_config
                    )
                    export_service = ExportService(export_config)

                    # 4. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    success = export_service.export_video(
                        meeting_config, composition_engine
                    )

                    if success:
                        st.success("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                        with open(meeting_config.output_path, "rb") as f:
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                                data=f.read(),
                                file_name="meeting_output.mp4",
                                mime="video/mp4",
                                width="stretch",
                            )
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")

            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")

    def run(self):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        –†–∞–∑–¥–µ–ª—è–µ—Ç —ç–∫—Ä–∞–Ω –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏: 2/3 –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, 1/3 –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        col_preview, col_settings = st.columns([2, 1])

        with col_preview:
            self._render_preview_section()

        with col_settings:
            self._render_settings_section()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É –ø–æ–¥ –∫–æ–ª–æ–Ω–∫–∞–º–∏
        self._render_export_section()


# --- –¢–æ—á–∫–∞ –í—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    app = VideoMeetingComposerApp()
    app.run()
